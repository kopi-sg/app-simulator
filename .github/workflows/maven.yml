name: Build and Test

on:
  push:
    branches:
      - main
      - dev/*

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    steps:
      - name: init
        run: |
          echo "::error:: this is an error"
          echo ""::warning title=warning-title::this is warning message""

  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      var1: ${{steps.build.outputs.var1}}
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: 11
          distribution: "corretto"
          cache: maven
      - name: Cache the Maven packages to speed up build
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: setup-java-${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: setup-java-${{ runner.os }}-maven

      - name: Build
        id: build
        run: |
          echo "var1=testing" >> $GITHUB_OUTPUT
          mvn -Dmaven.test.skip=true -Ddependency-check.skip=true install

      - name: Test
        run: |
          mvn org.codehaus.mojo:versions-maven-plugin:2.7:set -DnextSnapshot=true # hardcoded plugin 2.7
          INC_VERSION=$(mvn help:evaluate -Dexpression=project.version | grep -v '\[.*') && echo $INC_VERSION
          echo "version=${INC_VERSION}" >> $GITHUB_ENV
          echo "name=test" >> $GITHUB_ENV
          echo "done"
      - name: Output
        run: |
          echo "$version"
          echo "$name"
  test:
    name: Test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/dev/')
    needs: build
    permissions: write-all
    steps:
      - name: Print
        run: |
          echo "build::: ${{needs.build.outputs.var1}}"
      - uses: actions/checkout@v4
      - name: Cache the Maven packages to speed up build
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: setup-java-${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: setup-java-${{ runner.os }}-maven

      - name: Test
        run: |
          mvn --batch-mode -Dmaven.test.failure.ignore=true test

      - name: Publish Test Results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: maven-test
          path: target/surefire-reports/*.xml
          reporter: java-junit
          fail-on-error: true

      # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
      - name: Update dependency graph
        uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6

  scan:
    uses: ./.github/workflows/scan-maven.yml
    needs: [build, test]
    secrets: inherit
    with:
      os_version: "ubuntu-24.04"

  # scan:
  #   name: Scan
  #   runs-on: ubuntu-latest
  #   needs: [build, test]
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Get Date
  #       id: get-date
  #       run: |
  #         echo "datetime=$(/bin/date -u "+%Y%m%d%H")" >> $GITHUB_OUTPUT
  #       shell: bash

  #     - name: Restore cached Maven dependencies
  #       uses: actions/cache@v4
  #       with:
  #         path: ~/.m2/repository
  #         # Using datetime in cache key as OWASP database may change, without the pom changing
  #         key: ${{ runner.os }}-maven-${{ steps.get-date.outputs.datetime }}-${{ hashFiles('**/pom.xml') }}
  #         restore-keys: |
  #           ${{ runner.os }}-maven-${{ steps.get-date.outputs.datetime }}
  #           ${{ runner.os }}-maven-

  #     # - name: Build with no Test
  #     #   run: |
  #     #     mvn -Dmaven.test.skip=true -Ddependency-check.skip=true install
  #     #     mvn dependency:copy-dependencies

  #     - name: Download OWASP Dependency Check
  #       run: |
  #         VERSION=$(curl -s https://jeremylong.github.io/DependencyCheck/current.txt)
  #         curl -sL "https://github.com/jeremylong/DependencyCheck/releases/download/v$VERSION/dependency-check-$VERSION-release.zip" --output dependency-check.zip
  #         unzip dependency-check.zip

  #     - name: Run Dependency Check
  #       run: |
  #         mkdir dependency-check-result
  #         ./dependency-check/bin/dependency-check.sh --project "${{ github.event.repository.name }}" --nvdApiKey ${{ secrets.NVD_API_KEY }} --scan . --format ALL -l odc.log  --out dependency-check-result/

  #     - name: Upload artifact
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: Dependency Check Result
  #         path: dependency-check-result/

  publish_job:
    name: Publish Job
    runs-on: ubuntu-latest
    needs: [scan]

    steps:
      - uses: actions/checkout@v4

      - run: mvn -B package --file pom.xml -DskipTests
      - run: mkdir staging && cp target/*.jar staging

      - name: upload build
        uses: actions/upload-artifact@v1
        with:
          name: Package
          path: staging

  # https://github.com/docker/build-push-action
  dockerize:
    name: Dockerize
    runs-on: ubuntu-latest
    needs: [scan]

    steps:
      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v3

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v3
      - name: Set env
        run: echo "DATE=$(date +%s)" >> $GITHUB_ENV

      - name: Login to dockerhub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push to dockerhubb
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: weihan1394/simulator:${{ env.DATE }}, weihan1394/simulator:latest

  promote_dev:
    runs-on: "ubuntu-latest"
    if: startsWith(github.ref, 'refs/heads/dev/')
    environment: "dev"
    needs: [publish_job, dockerize]
    steps:
      - name: deploy
        run: |
          echo "deploying dev..."

  promote_qa:
    runs-on: "ubuntu-latest"
    if: github.ref == 'refs/heads/main'
    environment: "qa"
    needs: [publish_job, dockerize]
    steps:
      - name: deploy
        run: |
          echo "deploying qa..."

  promote_prd:
    runs-on: "ubuntu-latest"
    if: github.ref == 'refs/heads/main'
    environment: "prd"
    needs: promote_qa
    steps:
      - name: deploy
        run: |
          echo "deploying prd..."
